{
  "_args": [
    [
      {
        "raw": "miio@github:hanspeide/miio",
        "scope": null,
        "escapedName": "miio",
        "name": "miio",
        "rawSpec": "github:hanspeide/miio",
        "spec": "github:hanspeide/miio",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:hanspeide/miio.git",
          "sshUrl": "git+ssh://git@github.com/hanspeide/miio.git",
          "httpsUrl": "git+https://github.com/hanspeide/miio.git",
          "gitUrl": "git://github.com/hanspeide/miio.git",
          "shortcut": "github:hanspeide/miio",
          "directUrl": "https://raw.githubusercontent.com/hanspeide/miio/master/package.json"
        }
      },
      "/Users/hanspeide/Development/projects/miio-server"
    ]
  ],
  "_from": "hanspeide/miio",
  "_id": "miio@0.15.4",
  "_inCache": true,
  "_location": "/miio",
  "_phantomChildren": {
    "ms": "2.0.0"
  },
  "_requested": {
    "raw": "miio@github:hanspeide/miio",
    "scope": null,
    "escapedName": "miio",
    "name": "miio",
    "rawSpec": "github:hanspeide/miio",
    "spec": "github:hanspeide/miio",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:hanspeide/miio.git",
      "sshUrl": "git+ssh://git@github.com/hanspeide/miio.git",
      "httpsUrl": "git+https://github.com/hanspeide/miio.git",
      "gitUrl": "git://github.com/hanspeide/miio.git",
      "shortcut": "github:hanspeide/miio",
      "directUrl": "https://raw.githubusercontent.com/hanspeide/miio/master/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/hanspeide/miio.git#e6f0dee16d5d924b3cbc30d4a3d224ec058d1817",
  "_shasum": "b03fa4628315ca7561d23006f69a87c47948dc17",
  "_shrinkwrap": null,
  "_spec": "miio@github:hanspeide/miio",
  "_where": "/Users/hanspeide/Development/projects/miio-server",
  "bin": {
    "miio": "./cli/index.js"
  },
  "bugs": {
    "url": "https://github.com/hanspeide/miio/issues"
  },
  "dependencies": {
    "abstract-things": "^0.9.0",
    "appdirectory": "^0.1.0",
    "chalk": "^2.3.0",
    "debug": "^3.1.0",
    "deep-equal": "^1.0.1",
    "mkdirp": "^0.5.1",
    "tinkerhub-discovery": "^0.3.1",
    "yargs": "^10.1.1"
  },
  "description": "Control Mi Home devices, such as Mi Robot Vacuums, Mi Air Purifiers, Mi Smart Home Gateway (Aqara) and more",
  "devDependencies": {
    "eslint": "^4.14.0",
    "eslint-plugin-node": "^5.2.1"
  },
  "engines": {
    "node": ">=6.6.0"
  },
  "gitHead": "e6f0dee16d5d924b3cbc30d4a3d224ec058d1817",
  "homepage": "https://github.com/hanspeide/miio#readme",
  "keywords": [
    "xiaomi",
    "mi",
    "miio",
    "aqara",
    "yeelight",
    "mijia"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "miio",
  "optionalDependencies": {},
  "readme": "# miIO Device Library\n\n[![npm version](https://badge.fury.io/js/miio.svg)](https://badge.fury.io/js/miio)\n[![Dependencies](https://david-dm.org/aholstenson/miio.svg)](https://david-dm.org/aholstenson/miio)\n\nControl Mi Home devices that implement the miIO protocol, such as the\nMi Air Purifier, Mi Robot Vacuum and Mi Smart Socket. These devices are commonly\npart of what Xiaomi calls the Mi Ecosystem which is branded as MiJia.\n\n`miio` is [MIT-licensed](LICENSE.md) and requires at least Node 6.6.0. As\nthe API is promise-based Node 8 is recommended which provides support `async`\nand `await` that greatly simplifies asynchronous handling.\n\n**Note:** Since 0.15.0 this library has been rewritten to use [abstract-things](https://github.com/tinkerhub/abstract-things)\nas its base. The API of devices will have changed, and some bugs are to be\nexpected. Testing and feedback on the new API is welcome, please open issues\nas needed.\n\n## Devices types\n\nThe intent of this library is to support all miIO-compatible devices and to\nprovide an easy to use API for them. The library maps specific device models to\ngeneric device types with well defined capabilities to simplify interacting with\nthem.\n\nCurrently supported devices are:\n\n* Air Purifiers (1, 2 and Pro)\n* Mi Humidifier\n* Mi Smart Socket Plug and Power Strips\n* Mi Robot Vacuum (V1 and V2)\n* Mi Smart Home Gateway (Aqara) and accessories - switches, sensors, etc\n* Philips Light Bulb and Eyecare Lamp\n* Yeelights (White Bulb, Color Bulb, Desk Lamp and Strip)\n\nSee [documentation for devices](docs/devices/README.md) for information about\nthe types, their API and supported device models. You can also check\n[Missing devices](docs/missing-devices.md) if you want to know what you can do\nto help this library with support for your device.\n\n## Installation\n\nTo install into your project:\n\n```\nnpm install miio\n```\n\nTo install globally for access to the command line tool:\n\n```\nnpm install -g miio\n```\n\n## Usage\n\n```javascript\nconst miio = require('miio');\n```\n\nResolve a handle to the device:\n\n```javascript\n// Resolve a device, resolving the token automatically or from storage\nmiio.device({ address: '192.168.100.8' })\n  .then(device => console.log('Connected to', device))\n  .catch(err => handleErrorHere);\n\n// Resolve a device, specifying the token (see below for how to get the token)\nmiio.device({ address: '192.168.100.8', token: 'token-as-hex' })\n  .then(device => console.log('Connected to', device))\n  .catch(err => handleErrorHere);\n```\n\nCall methods to interact with the device:\n\n```javascript\n// Switch the power of the device\ndevice.togglePower()\n  .then(on => console.log('Power is now', on))\n  .catch(err => handleErrorHere);\n\n// Using async/await\nawait device.togglePower();\n```\n\nListen to events such as property changes and actions:\n\n```javascript\n// Listen for power changes\ndevice.on('power', power => console.log('Power changed to', power));\n\n// The device is available for event handlers\nconst handler = ({ action }, device) => console.log('Action', action, 'performed on', device);\ndevice1.on('action', handler);\ndevice2.on('action', handler);\n```\n\nCapabilities and types are used to hint about what a device can do:\n\n```javascript\nif(device.matches('cap:temperature')) {\n  console.log(await device.temperature());\n}\n\nif(device.matches('cap:switchable-power')) {\n  device.setPower(false)\n    .then(console.log)\n    .catch(console.error);\n}\n```\n\nIf you are done with the device call `destroy` to stop all network traffic:\n\n```javascript\ndevice.destroy();\n```\n\n## Tokens and device management\n\nA few miIO devices send back their token during a handshake and can be used\nwithout figuring out the token. Most devices hide their token, such as\nYeelights and the Mi Robot Vacuum.\n\nThere is a command line tool named `miio` that helps with finding and storing\ntokens. See [Device management](docs/management.md) for details\nand common use cases.\n\n## Discovering devices\n\nUse `miio.devices()` to look for and connect to devices on the local network.\nThis method of discovery will tell you directly if a device reveals its token\nand can be auto-connected to. If you do not want to automatically connect to\ndevices you can use `miio.browse()` instead.\n\nExample using `miio.devices()`:\n\n```javascript\nconst devices = miio.devices({\n  cacheTime: 300 // 5 minutes. Default is 1800 seconds (30 minutes)\n});\n\ndevices.on('available', device => {\n  if(device.matches('placeholder')) {\n    // This device is either missing a token or could not be connected to\n  } else {\n    // Do something useful with device\n  }\n});\n\ndevices.on('unavailable', device => {\n  // Device is no longer available and is destroyed\n});\n```\n\n`miio.devices()` supports these options:\n\n* `cacheTime`, the maximum amount of seconds a device can be unreachable before it becomes unavailable. Default: `1800`\n* `filter`, function used to filter what devices are connected to. Default: `reg => true`\n* `skipSubDevices`, if sub devices on Aqara gateways should be skipped. Default: `false`\n* `useTokenStorage`, if tokens should be fetched from storage (see device management). Default: `true`\n* `tokens`, object with manual mapping between ids and tokens (advanced, use [Device management](docs/management.md) if possible)\n\nSee [Advanced API](docs/advanced-api.md) for details about `miio.browse()`.\n\n## Device API\n\nCheck [documentation for devices](docs/devices/README.md) for details about\nthe API for supported devices. Detailed documentation of the core API is\navailable in the section [Using things in the abstract-things documentation](http://abstract-things.readthedocs.io/en/latest/using-things.html).\n\n## Library versioning and API stability\n\nThis library uses [semantic versioning](http://semver.org/) with an exception\nbeing that the API for devices is based on their type and capabilities and not\ntheir model.\n\nThis means that a device can have methods removed if its type or capabilities\nchange, which can happen if a better implementation is made available for the\nmodel. When working with the library implement checks against type and\ncapabilities for future compatibility within the same major version of `miio`.\n\nCapabilities can be considered stable across major versions, if a device\nsupports `power` no minor or patch version will introduce `power-mega` and\nreplace `power`. If new functionality is needed the new capability will be\nadded along side the older one.\n\n## Reporting issues\n\n[Reporting issues](docs/reporting-issues.md) contains information that is\nuseful for making any issue you want to report easier to fix.\n\n## Debugging\n\nThe library uses [debug](https://github.com/visionmedia/debug) with two\nnamespaces, `miio` is used for packet details and network discovery and devices\nuse the `thing:miio` namespace. These are controlled via the `DEBUG`\nenvironment flag. The flag can be set while running the miio command or any\nNodeJS script:\n\nShow debug info about devices during discovery:\n\n```\n$ DEBUG=thing\\* miio discover\n```\n\nTo activate both namespaces set `DEBUG` to both:\n\n```\n$ DEBUG=miio\\*,thing\\* miio discover\n```\n\n## Protocol documentation\n\nThis library is based on the documentation provided by OpenMiHome. See https://github.com/OpenMiHome/mihome-binary-protocol for details. For details\nabout how to figure out the commands for new devices look at the\n[documentation for protocol and commands](docs/protocol.md).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/hanspeide/miio.git"
  },
  "scripts": {
    "test": "eslint ."
  },
  "version": "0.15.4"
}
